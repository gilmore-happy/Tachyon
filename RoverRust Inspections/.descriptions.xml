<inspections profile="Deep Scan"><group name="XML" path=""><inspection shortName="XmlPathReference" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckDtdRefs" defaultSeverity="ERROR" displayName="Unresolved DTD reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration.
Works in DTD an XML files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlHighlighting" defaultSeverity="ERROR" displayName="XML highlighting" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports XML validation problems in the results of a batch code inspection.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckTagEmptyBody" defaultSeverity="WARNING" displayName="Empty element content" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports XML elements without contents.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name&gt;&amp;lt;/name&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name/&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckXmlFileWithXercesValidator" defaultSeverity="ERROR" displayName="Failed external validation" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDefaultAttributeValue" defaultSeverity="WARNING" displayName="Redundant attribute with default value" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant assignment of the default value to an XML attribute.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlInvalidId" defaultSeverity="ERROR" displayName="Unresolved 'id' reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the use of the &lt;code&gt;id&lt;/code&gt; that is not defined anywhere in XML and HTML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnboundNsPrefix" defaultSeverity="WARNING" displayName="Unbound namespace prefix" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unbound namespace prefix in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDuplicatedId" defaultSeverity="ERROR" displayName="Duplicate 'id' attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate values of the &lt;code&gt;id&lt;/code&gt; attribute in XML and HTML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDeprecatedElement" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated XML element or  attribute.
&lt;p&gt;Symbols can be marked by XML comment or documentation tag with text 'deprecated'.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnusedNamespaceDeclaration" defaultSeverity="WARNING" displayName="Unused schema declaration" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused namespace declaration or location hint in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlWrongRootElement" defaultSeverity="ERROR" displayName="Wrong root element" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a root tag name different from the name specified in the &lt;code&gt;&amp;lt;doctype&amp;gt;&lt;/code&gt; tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved references" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved references in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Version control" path=""><inspection shortName="IgnoreFileDuplicateEntry" defaultSeverity="WARNING" displayName="Ignore file duplicates" enabled="true" language="IgnoreLang" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore).
Duplicate entries in these files are redundant and can be removed.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    # Output directories
    /out/
    /target/
    /out/
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="TOML" path=""><inspection shortName="TomlUnresolvedReference" defaultSeverity="WARNING" displayName="Unresolved reference" enabled="true" language="TOML" pluginId="org.toml.lang" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in TOML files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Structural search" path=""><inspection shortName="SSBasedInspection" defaultSeverity="WARNING" displayName="Structural search inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Allows configuring &lt;b&gt;Structural Search/Structural Replace&lt;/b&gt; templates that you can apply to the file you are editing.
&lt;/p&gt;
&lt;p&gt;All matches will be highlighted and marked with the template name that you have configured.
If you configure the &lt;b&gt;Structural Replace&lt;/b&gt; pattern as well, the corresponding replace option will be available as a quick-fix.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Internationalization" path=""><inspection shortName="NonAsciiCharacters" defaultSeverity="WARNING" displayName="Non-ASCII characters" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code elements that use non-ASCII symbols in an unusual context.

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-ASCII characters used in identifiers, strings, or comments.&lt;/li&gt;
  &lt;li&gt;Identifiers written in different languages, such as &lt;code&gt;my&lt;b&gt;ะก&lt;/b&gt;ollection&lt;/code&gt; with the
    letter &lt;code&gt;&lt;b&gt;C&lt;/b&gt;&lt;/code&gt; written in Cyrillic.&lt;/li&gt;
  &lt;li&gt;Comments or strings containing Unicode symbols, such as long dashes and arrows.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LossyEncoding" defaultSeverity="WARNING" displayName="Lossy encoding" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;

Reports characters that cannot be displayed because of the current document encoding.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you type international characters in a document with the &lt;b&gt;US-ASCII&lt;/b&gt; charset, some characters will be lost on save.&lt;/li&gt;
  &lt;li&gt;If you load a &lt;b&gt;UTF-8&lt;/b&gt;-encoded file using the &lt;b&gt;ISO-8859-1&lt;/b&gt; one-byte charset, some characters will be displayed incorrectly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can fix this by changing the file encoding
either by specifying the encoding directly in the file, e.g. by editing &lt;code&gt;encoding=&lt;/code&gt; attribute in the XML prolog of XML file,
  or by changing the corresponding options in &lt;b&gt;Settings | Editor | File Encodings&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSON and JSON5" path=""><inspection shortName="JsonSchemaCompliance" defaultSeverity="WARNING" displayName="Compliance with JSON schema" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistence between a JSON file and the &lt;a href="https://json-schema.org"&gt;JSON schema&lt;/a&gt; that is assigned to it.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated JSON property" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated property in a JSON file.&lt;br&gt;
Note that deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard extension 'deprecationMessage'.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Json5StandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON5 standard" enabled="true" language="JSON5" pluginId="com.intellij.modules.json" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency with &lt;a href="http://json5.org"&gt;the language specification&lt;/a&gt; in a JSON5 file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaRefReference" defaultSeverity="WARNING" displayName="Unresolved '$ref' and '$schema' references" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;code&gt;$ref&lt;/code&gt; or &lt;code&gt;$schema&lt;/code&gt; path in a JSON schema.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonDuplicatePropertyKeys" defaultSeverity="WARNING" displayName="Duplicate keys in object literals" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate key in an object literal.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonStandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON standard" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following discrepancies of a JSON file with  &lt;a href="https://tools.ietf.org/html/rfc7159"&gt;the language specification&lt;/a&gt;:
&lt;ul&gt;
  &lt;li&gt;A line or  block comment (configurable).&lt;/li&gt;
  &lt;li&gt;Multiple top-level values (expect for JSON Lines files, configurable for others).&lt;/li&gt;
  &lt;li&gt;A trailing comma in an object or array (configurable).&lt;/li&gt;
  &lt;li&gt;A single quoted string.&lt;/li&gt;
  &lt;li&gt;A property key is a not a double quoted strings.&lt;/li&gt;
  &lt;li&gt;A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Lints" path="Rust"><inspection shortName="RsRedundantSemicolons" defaultSeverity="WARNING" displayName="Redundant semicolons" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Detects unnecessary trailing semicolons.

Corresponds to the &lt;a href="https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#redundant-semicolons"&gt;redundant_semicolons&lt;/a&gt;
lint.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsLiveness" defaultSeverity="WARNING" displayName="Liveness analysis" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports unused local variables and parameters.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnusedImport" defaultSeverity="WARNING" displayName="Unused import" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Detects unused &lt;code&gt;use&lt;/code&gt; directives.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnknownCrateTypes" defaultSeverity="ERROR" displayName="Unknown crate types" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Detects an unknown crate type found in a &lt;code&gt;crate_type&lt;/code&gt; attribute.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnusedMut" defaultSeverity="WEAK WARNING" displayName="Unused `mut` modifier" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unnecessary &lt;code&gt;mut&lt;/code&gt; qualifiers.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsNeedlessLifetimes" defaultSeverity="WEAK WARNING" displayName="Unnecessary lifetime annotations" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks for lifetime annotations which can be removed by relying on lifetime elision.
Corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#needless_lifetimes"&gt;needless_lifetimes&lt;/a&gt;
lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnusedLabels" defaultSeverity="WARNING" displayName="Unused labels" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Detects labels that are never used.  Unused labels may signal a mistake or unfinished code.

Corresponds to the &lt;a href="https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#unused-labels"&gt;unused_labels&lt;/a&gt;
rust warning.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnusedMustUse" defaultSeverity="WEAK WARNING" displayName="Unused `#[must_use]`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Detects unused result of a type flagged as &lt;code&gt;#[must_use]&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnnecessaryParentheses" defaultSeverity="WEAK WARNING" displayName="Unnecessary parentheses" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unnecessary parentheses.

Corresponds to the &lt;a href="https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#unused-parens"&gt;unused-parens&lt;/a&gt; Rust lint.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnnecessaryReturn" defaultSeverity="WEAK WARNING" displayName="Unnecessary return" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Reports unnecessary return statements at the end of a block.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDoubleMustUse" defaultSeverity="WEAK WARNING" displayName="Redundant `#[must_use]`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Checks for a &lt;code&gt;#[must_use]&lt;/code&gt; attribute without further information on functions and methods
that return a type already marked as &lt;code&gt;#[must_use]&lt;/code&gt;.

Corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable#double_must_use"&gt;double_must_use&lt;/a&gt;
lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnwrap" defaultSeverity="WEAK WARNING" displayName="Unwrap can be replaced with `?`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to `unwrap()` that can be replaced with `?`.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsReplaceCastWithSuffix" defaultSeverity="WEAK WARNING" displayName="Cast can be replaced with literal suffix" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects &lt;code&gt;as&lt;/code&gt; casts that can be replaced with literal suffixes.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsWhileTrueLoop" defaultSeverity="WEAK WARNING" displayName="`while true` can be replaced with `loop`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Detects &lt;code&gt;while&lt;/code&gt; loops which can be replaced with &lt;code&gt;loop&lt;/code&gt;.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnnecessaryCast" defaultSeverity="WEAK WARNING" displayName="Unnecessary cast" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unnecessary &lt;code&gt;as&lt;/code&gt; casts.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDeprecation" defaultSeverity="WARNING" displayName="Deprecated element" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects the item marked with &lt;code&gt;#[deprecated(...)]&lt;/code&gt; attribute, which is discouraged from using,
typically because it is dangerous, or because a better alternative exists.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsPathStatements" defaultSeverity="WEAK WARNING" displayName="Ineffective path statements" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Detects path statements with no effect. It is usually a mistake to have a statement that has no effect.

Corresponds to the &lt;a href="https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#path-statements"&gt;path_statements&lt;/a&gt;
Rust lint.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnnecessaryQualifications" defaultSeverity="WEAK WARNING" displayName="Unnecessary path prefix" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unnecessarily qualified paths.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnreachablePatterns" defaultSeverity="WARNING" displayName="Unreachable patterns" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that &lt;code&gt;match&lt;/code&gt; expression doesn't have unreachable patterns.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsNonShorthandFieldPatterns" defaultSeverity="WEAK WARNING" displayName="Non-shorthand field pattern" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects using &lt;code&gt;Struct { x: x }&lt;/code&gt; instead of &lt;code&gt;Struct { x }&lt;/code&gt; in a pattern.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnreachableCode" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports unreachable code.
&lt;!-- tooltip end --&gt;</inspection></group><group name="Rust" path=""><inspection shortName="RsThreadRngGen" defaultSeverity="WEAK WARNING" displayName="`thread_rng().gen()` can be replaced with `random()`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Detects usage of &lt;code&gt;thread_rng().gen()&lt;/code&gt;
that can be replaced with &lt;code&gt;random()&lt;/code&gt; from &lt;code&gt;rand&lt;/code&gt; crate.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsAsyncMainFunction" defaultSeverity="ERROR" displayName="Entry point is async" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if the entry point of the program was marked as &lt;code&gt;async&lt;/code&gt;.&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsCommaSeparatedTraitBounds" defaultSeverity="ERROR" displayName="Comma-separated trait bounds" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports trait bounds for a single type that are separated with a comma instead of a `+` sign.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTypePlaceholderIsForbidden" defaultSeverity="ERROR" displayName="Type placeholder used in item signature" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of type placeholders (&lt;code&gt;_&lt;/code&gt;) in an item's signature.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExternCrateSelfWithoutAsName" defaultSeverity="ERROR" displayName="`extern crate self` missing `as &lt;name&gt;`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports `extern crate self` that is not followed by `as &amp;lt;name&amp;gt;`.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsArrayOutOfBounds" defaultSeverity="ERROR" displayName="Literal out of range" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Check if the index of an array is out of bounds.
&lt;code&gt;
    let mut array: [i32; 3] = [0; 3];
    array[4];
&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDetachedFile" defaultSeverity="WARNING" displayName="Detached file" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects files that are not attached to any Rust module.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDeriveOnUnsupportedItem" defaultSeverity="ERROR" displayName="`#[derive]` not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports `derive` attributes applied to items other than structs, enums, or unions.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsCrateName" defaultSeverity="ERROR" displayName="Invalid crate name" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Check if the crate name is valid, namely the crate name must not be empty, and must only
contain &lt;a href="https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric"&gt;Unicode alphanumeric&lt;/a&gt;
or &lt;code&gt;_&lt;/code&gt; (U+005F) characters.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsRepeatedIdentifierInPattern" defaultSeverity="ERROR" displayName="Repeated identifier in pattern" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports identifiers bound more than once in the same pattern.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsModuleNotInModRs" defaultSeverity="ERROR" displayName="Module declared outside mod.rs" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports module declarations in files other than mod.rs.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsWrongGenericArgumentsNumber" defaultSeverity="ERROR" displayName="Wrong number of generic arguments" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if the right number of generic arguments was used for a type, trait, function call or method call.
&lt;br/&gt;
Corresponds to the &lt;a href="https://doc.rust-lang.org/error-index.html#E0107"&gt;E0107&lt;/a&gt; Rust error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsAttrError" defaultSeverity="ERROR" displayName="Attribute error" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports issues with attributes including misuse, redundancy, formatting errors, invalid entries, outdated syntax, and more.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDefaultsConstGenericNotAllowed" defaultSeverity="ERROR" displayName="Defaults for const parameters not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid use of defaults for const parameters. They are only allowed in struct, enum, type, and trait definitions.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSimplifyBooleanExpression" defaultSeverity="WARNING" displayName="Boolean expression can be simplified" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects boolean expressions that can be safely simplified like &lt;code&gt;a || true&lt;/code&gt;.&lt;br&gt;
Does not simplify expressions if some side effects can be eliminated, such as &lt;code&gt;return || true&lt;/code&gt; for example.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsModuleInsideBlockWithoutPath" defaultSeverity="ERROR" displayName="Non-inline module declaration missing path attribute" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports non-inline modules declared inside a block and missing the path attribute.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsCannotImplForDynAutoTrait" defaultSeverity="ERROR" displayName="Inherent `impl` for dyn auto trait" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inherent implementations for dynamic auto traits.
&lt;a href="https://doc.rust-lang.org/error_codes/E0785.html"&gt;E0785&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsCratesInPath" defaultSeverity="ERROR" displayName="`crate` in paths" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports `crate` used in paths.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsIncorrectlyPlacedInlineAttr" defaultSeverity="ERROR" displayName="`#[inline]` not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports `inline` attributes applied to items other than functions or closures.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidMacroVariableType" defaultSeverity="ERROR" displayName="Invalid macro variable type" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid fragment specifier of a macro variable.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFunctionParametersAreSized" defaultSeverity="ERROR" displayName="Parameter type with unknown size" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports function parameters whose types are unknown at compile time.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsPublicItemsInProcMacroCrate" defaultSeverity="ERROR" displayName="Public item in proc-macro crate" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports public items located in the root of a procedural macro crate and
not marked with a #[proc_macro], #[proc_macro_attribute], or #[proc_macro_derive] attribute.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnreachableLabel" defaultSeverity="ERROR" displayName="Unreachable label" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports unreachable labels.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDuplicateDefinitionError" defaultSeverity="ERROR" displayName="Duplicate definition" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports duplicate items (such as field declarations, type parameters, etc.).
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsMainFunctionNotFound" defaultSeverity="ERROR" displayName="Main function not found" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if the &lt;code&gt;main&lt;/code&gt; function exists in the binary crates.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsIncorrectFunctionArgumentCount" defaultSeverity="ERROR" displayName="Wrong number of arguments" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports function calls with an incorrect number of arguments.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSelfValueIsNotAvailable" defaultSeverity="ERROR" displayName="`self` unavailable in context" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `self` in contexts where it is not available.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsRecursionInAsyncFunction" defaultSeverity="ERROR" displayName="No boxing for async recursion" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports recursion used in async functions without boxing.
&lt;a href="https://doc.rust-lang.org/error_codes/E0733.html"&gt;E0733&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsInvalidLifetimeName" defaultSeverity="ERROR" displayName="Invalid lifetime name" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports lifetimes with invalid names.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInherentImplDifferentCrate" defaultSeverity="ERROR" displayName="Inherent `impl` defined outside type's containing crate" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports inherent type implementations defined outside the type's original crate.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsStructRestWithoutBaseExpression" defaultSeverity="ERROR" displayName="Base expression required after `..`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Highlights &lt;code&gt;..&lt;/code&gt; expression inside struct literal without base expression after it.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSelfImport" defaultSeverity="ERROR" displayName="Invalid `self` import" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid `self` imports.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTryMacro" defaultSeverity="WEAK WARNING" displayName="`try!` macro usage" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Finds usages of the &lt;code&gt;try!&lt;/code&gt; macro which can be replaced with &lt;code&gt;?&lt;/code&gt; operator starting from Rust 1.13.0.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsReassignImmutable" defaultSeverity="ERROR" displayName="Immutable variable reassigned" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects immutable bindings reassignments.

Corresponds to &lt;a href="https://doc.rust-lang.org/error-index.html#E0384"&gt;E0384&lt;/a&gt; Rust error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsConstReferStatic" defaultSeverity="ERROR" displayName="Constants cannot refer to statics" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects constant variables that refer to static variables.

Corresponds to &lt;a href="https://doc.rust-lang.org/error-index.html#E0013"&gt;E0013&lt;/a&gt; Rust error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsTooManyLifetimeBoundsOnTraitObject" defaultSeverity="ERROR" displayName="Multiple lifetime bounds for trait object" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports trait objects with multiple lifetime bounds.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTraitExpected" defaultSeverity="ERROR" displayName="Trait expected" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports non-trait items referenced as traits.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDefaultTypeParametersSyntax" defaultSeverity="ERROR" displayName="Default type parameters syntax" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Report incorrect usage of default type parameters.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDoubleNeg" defaultSeverity="WARNING" displayName="Double negation" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects expressions of the form --x which might be mistook for pre-decrements.&lt;br&gt;
Corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#double_neg"&gt;double_neg&lt;/a&gt; lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsAssignToImmutable" defaultSeverity="ERROR" displayName="Immutable reassigned" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects assignments to immutable.

Corresponds to &lt;a href="https://doc.rust-lang.org/error-index.html#E0594"&gt;E0594&lt;/a&gt; Rust error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsAtLeastOneTraitForObjectType" defaultSeverity="ERROR" displayName="Object type with no traits" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports trait objects declared without a single trait.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidBreakContinue" defaultSeverity="ERROR" displayName="Invalid 'break' or 'continue'" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid usages of &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; in loops.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDotDotDotSyntaxIsDeprecated" defaultSeverity="ERROR" displayName="Deprecated `...` syntax" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `...` deprecated syntax.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsAsyncNonMoveClosureWithParameters" defaultSeverity="ERROR" displayName="`async` non-`move` closure with parameters (unsupported)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `async` non-`move` closures with parameters for Rust 1.76 or earlier versions that do not support it.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsNonExistentFieldAccess" defaultSeverity="ERROR" displayName="Non-existent field access" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to access non-existent fields.
&lt;a href="https://doc.rust-lang.org/error_codes/E0609.html"&gt;E0609&lt;/a&gt;,
&lt;a href="https://doc.rust-lang.org/error_codes/E0610.html"&gt;E0610&lt;/a&gt;,
&lt;a href="https://doc.rust-lang.org/error_codes/E0615.html"&gt;E0615&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsTypeCheck" defaultSeverity="ERROR" displayName="Type checker" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">The Rust type checker.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsReplaceMatchExpr" defaultSeverity="WEAK WARNING" displayName="Match expression can be replaced with a method call" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Reports match expressions that can be replaced with a method call.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsTraitImplementation" defaultSeverity="ERROR" displayName="Trait implementation issue" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports errors in trait implementation like "Missing members", "Unknown member", etc.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsRedundantColonColon" defaultSeverity="WEAK WARNING" displayName="Redundant `::`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports redundant &lt;code&gt;::&lt;/code&gt;.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsWrongGenericArgumentsOrder" defaultSeverity="ERROR" displayName="Misordered generic arguments" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Generic arguments were not provided in the same order as the corresponding generic parameters are declared.
&lt;br/&gt;
Corresponds to the &lt;a href="https://doc.rust-lang.org/error-index.html#E0747"&gt;E0747&lt;/a&gt; Rust error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnderscoreInExpression" defaultSeverity="ERROR" displayName="`_` on the right-hand side of assignment" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid use of underscores (`_`) in expressions: they are only allowed on the left-hand side of an assignment.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsImplToString" defaultSeverity="WEAK WARNING" displayName="`ToString` should not be implemented directly" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Detects implementations of &lt;code&gt;ToString&lt;/code&gt; trait which, as its documentation states, shouldn't be
implemented directly and &lt;code&gt;Display&lt;/code&gt; trait should be implemented instead.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsImplDropForNonAdt" defaultSeverity="ERROR" displayName="Invalid `Drop` implementation" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid `Drop` implementations. The `Drop` trait can only be implemented for structs and enums.
&lt;a href="https://doc.rust-lang.org/error_codes/E0120.html"&gt;E0120&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsSuspiciousAssignment" defaultSeverity="WARNING" displayName="Suspicious assignment" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects use of the non-existent &lt;code&gt;=*&lt;/code&gt;, &lt;code&gt;=!&lt;/code&gt; and &lt;code&gt;=-&lt;/code&gt;
operators that are probably typos.&lt;br&gt;
Corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#suspicious_assignment_formatting"&gt;suspicious_assignment_formatting&lt;/a&gt;
lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsNoIncDecOperator" defaultSeverity="ERROR" displayName="Use of increment/decrement operator (unsupported)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `++` and `--` operators, which are not supported in Rust.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsConstantConditionIf" defaultSeverity="WARNING" displayName="`if` condition is constant" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; expressions that have &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; constant literal condition and can be simplified.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDefaultKeywordIsNotAllowed" defaultSeverity="ERROR" displayName="`default` qualifier not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid `default` keyword placement.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsLift" defaultSeverity="WEAK WARNING" displayName="`return` can be lifted" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; statements that can be converted to expressions by lifting a &lt;code&gt;return&lt;/code&gt; out.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsApproxConstant" defaultSeverity="WARNING" displayName="Approximated constants" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports hard coded numeric constants such as &lt;code&gt;std::f64::consts::PI&lt;/code&gt;.

Corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#approx_constant"&gt;approx_constant&lt;/a&gt; lint from
Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsLoopOnlyKeywordOutsideOfLoop" defaultSeverity="ERROR" displayName="`continue`/`break` used outside `loop`/`while`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `break`/`continue` keywords outside `loop`/`while` blocks.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExperimentalChecks" defaultSeverity="ERROR" displayName="Experimental inspections" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Some unstable experimental checks which are disabled by default.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnresolvedPath" defaultSeverity="ERROR" displayName="Unresolved path" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved path references.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsFieldWithoutType" defaultSeverity="ERROR" displayName="Missing struct field type" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports struct fields declared without a type.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsBorrowChecker" defaultSeverity="ERROR" displayName="Borrow checker errors" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports basic borrow checker errors.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFunctionCannotHaveAnonymousParameters" defaultSeverity="ERROR" displayName="Anonymous function parameters not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of anonymous parameters in functions that do not allow it.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsConstSyntax" defaultSeverity="ERROR" displayName="Incorrect const syntax" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect const syntax.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTestFailedLine" defaultSeverity="WARNING" displayName="Failed line in test" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports failed function calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsItemStructure" defaultSeverity="ERROR" displayName="Item cannot be inside another item" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports structs, enums, macro definitions and traits placed inside other structs, enums, macro definitions or traits.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsWrongGenericParametersNumber" defaultSeverity="ERROR" displayName="Wrong number of type or const parameters" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if an attempted implementation of a trait method or an associated type has the right number of type or const parameters.
&lt;br/&gt;
Corresponds to the &lt;a href="https://doc.rust-lang.org/error-index.html#E0049"&gt;E0049&lt;/a&gt; Rust error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsReservedLifetimeName" defaultSeverity="ERROR" displayName="Reserved lifetime name" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of reserved lifetime names.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsEnumReprIntIsRequired" defaultSeverity="ERROR" displayName="`#[repr(inttype)]` missing for enum" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports enums that require a `#[repr(inttype)]` attribute.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsImplForNonAdtError" defaultSeverity="ERROR" displayName="Inherent `impl` block not allowed for item" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports inherent `impl` blocks defined for items other than structs, enums, unions, or trait objects.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsThreadLocalStableMethodCanBeUsed" defaultSeverity="WEAK WARNING" displayName="`with` call can be replaced with thread local stable method" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Detects usages of &lt;code&gt;LocalKey::with()&lt;/code&gt; method that can be replaced with stable thread local methods.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnclosedTextLiteral" defaultSeverity="ERROR" displayName="Unclosed text literal" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports unclosed text literals.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsModuleNotFound" defaultSeverity="ERROR" displayName="No file found for module" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports module declarations with no corresponding file found.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsBareTraitObjects" defaultSeverity="ERROR" displayName="Missing `dyn` in trait objects" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if trait objects are explicitly specified with &lt;code&gt;dyn&lt;/code&gt; keyword.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsNestedQualificationOfLifetimeBounds" defaultSeverity="ERROR" displayName="Nested lifetime quantification" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports &lt;code&gt;where&lt;/code&gt; clauses containing nested quantification over lifetimes, which is not supported.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidMacroCall" defaultSeverity="ERROR" displayName="Invalid macro call" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports errors when calling macros.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsEdition2024Keywords" defaultSeverity="ERROR" displayName="Rust 2024 edition violation" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of keywords reserved in Rust 2024 edition,
as well as features unavailable in Rust 2024 edition.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSuperTraitIsNotImplemented" defaultSeverity="ERROR" displayName="Supertrait is not implemented" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing supertrait implementations.
&lt;a href="https://doc.rust-lang.org/error_codes/E0277.html"&gt;E0277&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnlabeledControlFlowExpr" defaultSeverity="ERROR" displayName="Unlabeled `continue`/`break` in labeled block" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of unlabeled `break`/`continue` statements inside labeled blocks.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsChainedComparisonOperatorRequiresParentheses" defaultSeverity="ERROR" displayName="Missing parentheses for chained comparison" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports chained comparison operators with missing parentheses.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidLabelName" defaultSeverity="ERROR" displayName="Invalid label name" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports labels with invalid names.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsCopyAndDropImpl" defaultSeverity="ERROR" displayName="Both `Copy` and `Drop` implemented" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases where the `Copy` trait is implemented along with `Drop`,
which is considered unsafe and currently not allowed in the Rust language.
&lt;a href="https://doc.rust-lang.org/error_codes/E0184.html"&gt;E0184&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUndeclaredTypeOrModule" defaultSeverity="ERROR" displayName="'crate' misplaced in path" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect use of the literal `crate` in a path. The `crate` literal is only allowed at the beginning of the path.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsNonConstantInConstant" defaultSeverity="ERROR" displayName="A non-constant value was used in a constant expression" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports a non-constant value or function call used in a constant expression.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDuplicateHashKey" defaultSeverity="WEAK WARNING" displayName="Duplicate hash key" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate keys when creating hash maps.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsStructInheritance" defaultSeverity="ERROR" displayName="Struct inheritance (unsupported)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports struct inheritance, which is not supported in Rust.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDefaultValue" defaultSeverity="ERROR" displayName="Default parameter values (unsupported)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of default parameter values, which are not supported in Rust.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsCompilerFeatureIsUnavailable" defaultSeverity="ERROR" displayName="Compiler feature is unavailable" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports code that uses unavailable compiler features.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExperimentalTraitObligations" defaultSeverity="ERROR" displayName="Type does not implement trait (experimental)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of types that do not implement the necessary traits. This inspection covers more cases than `Type does not implement trait`, however it may produce false positives.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUndeclaredLifetime" defaultSeverity="ERROR" displayName="Undeclared lifetime name" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports undeclared lifetimes.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsReferenceIsNotPublic" defaultSeverity="ERROR" displayName="Invalid access of private item" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid attempts to access private fields or methods.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsForbiddenSizedImpl" defaultSeverity="ERROR" displayName="`Sized`/`Unsized` trait implemented explicitly" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports explicit implementations of the `Sized` and `Unsized` traits.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnresolvedMethod" defaultSeverity="ERROR" displayName="Unresolved method" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved method references.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsTypeCannotBeIndexedBy" defaultSeverity="ERROR" displayName="Index expression has a wrong type" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks type of index expression.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSimplifyPrint" defaultSeverity="WEAK WARNING" displayName="`println!` macro can be simplified" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects usages of &lt;code&gt;println!("")&lt;/code&gt; which can be simplified to &lt;code&gt;println!()&lt;/code&gt; since from Rust 1.14.0.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsPlaceExpression" defaultSeverity="ERROR" displayName="Invalid place expression" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid place expressions. For example:
&lt;code&gt;1 + 1 = 2&lt;/code&gt;.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsPatternsAreNotAllowed" defaultSeverity="ERROR" displayName="Complex pattern in function" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect use of patterns in functions.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFunctionCannotBeVariadic" defaultSeverity="ERROR" displayName="Function cannot be variadic" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports functions that cannot be declared variadic.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsLifetimeParametersBeforeTypeParameters" defaultSeverity="ERROR" displayName="Incorrect order of lifetime/type/const parameters" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrectly ordered lifetime, type, and const parameters.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsOnlyAutoTraitsInTraitObject" defaultSeverity="ERROR" displayName="Additional non-auto trait in trait object" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports trait objects with additional non-auto traits.
In trait objects, only auto traits can be added as additional traits.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsEdition2018Keywords" defaultSeverity="ERROR" displayName="Rust 2018 edition violation" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of keywords reserved in Rust 2018 edition,
as well as features unavailable in Rust 2018 edition.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsGenericDefaultParamCannotUseForward" defaultSeverity="ERROR" displayName="Forward-declared identifier for parameter with default value" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports generic parameters with default values that use forward-declared identifiers.
&lt;a href="https://doc.rust-lang.org/error_codes/E0128.html"&gt;E0128&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsItemCannotBeUnsafe" defaultSeverity="ERROR" displayName="Unsafe module" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports modules declared as unsafe.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsWrongLifetimeParametersNumber" defaultSeverity="ERROR" displayName="Wrong number of lifetime parameters" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if the right number of lifetime parameters was used for a type or trait.

Corresponds to &lt;a href="https://doc.rust-lang.org/error-index.html#E0106"&gt;E0106&lt;/a&gt; /
&lt;a href="https://doc.rust-lang.org/error-index.html#E0107"&gt;E0107&lt;/a&gt; Rust errors.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsAssertEqual" defaultSeverity="WEAK WARNING" displayName="Equality assertion can be simplified" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;RsAssertEqualInspection&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
Detect &lt;code&gt;assert!(a == b)&lt;/code&gt; (and &lt;code&gt;assert!(a != b)&lt;/code&gt;) macro call that can be simplified into
&lt;code&gt;assert_eq!(a, b)&lt;/code&gt; (or &lt;code&gt;assert_ne!(a, b)&lt;/code&gt;).
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDuplicateMacroPattern" defaultSeverity="WEAK WARNING" displayName="Duplicate macro pattern" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks duplicated patterns in macro definitions.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsTraitImplOrphanRules" defaultSeverity="ERROR" displayName="Foreign trait implementation" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports implementations of foreign traits (traits defined outside the current crate) for arbitrary types.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsAttrWithoutParentheses" defaultSeverity="ERROR" displayName="Attribute without parentheses" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects incomplete attributes that require parentheses.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnsafeInherentImpl" defaultSeverity="ERROR" displayName="Unsafe inherent implementation" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports inherent implementations marked as unsafe.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExperimentalUnresolvedMethod" defaultSeverity="ERROR" displayName="Unresolved method (experimental)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved method references. This inspection can report false positives.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnstableItemUsage" defaultSeverity="ERROR" displayName="Unstable item" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of unstable items.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDropCopyType" defaultSeverity="WARNING" displayName="`Copy` type dropped" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;std::mem::drop&lt;/code&gt; with values that derive the &lt;code&gt;Copy&lt;/code&gt; trait.&lt;br&gt;
Corresponds to the &lt;a href="https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#dropping-copy-types"&gt;dropping_copy_types&lt;/a&gt; lint.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsSleepInsideAsyncFunction" defaultSeverity="WEAK WARNING" displayName="Blocking `sleep` function cannot be used in `async` context" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects usages of blocking &lt;code&gt;thread::sleep()&lt;/code&gt; function in async contexts.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsVariableCaptureFromOuterFunction" defaultSeverity="ERROR" displayName="Dynamic environment capture in `fn`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports captures of a dynamic environment in a `fn` item.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsMultipleRelaxedBounds" defaultSeverity="ERROR" displayName="Multiple relaxed default bounds for type parameter" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports type parameters with multiple relaxed default bounds.
Only a single relaxed default bound is supported.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsRedundantElse" defaultSeverity="WARNING" displayName="Redundant `else`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects &lt;code&gt;else&lt;/code&gt;-statements preceded by irrefutable patterns.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsCompileErrorMacro" defaultSeverity="ERROR" displayName="`compile_error!` macro" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights `compile_error!()` macro invocation.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsImplTraitNotAllowed" defaultSeverity="ERROR" displayName="`impl Trait` not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect use of `impl Trait`. Abstract return types are only allowed as function and inherent impl return types.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnionExprFieldsCount" defaultSeverity="ERROR" displayName="Union expression fields count" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks that union expr has exactly one field.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidLetExpression" defaultSeverity="ERROR" displayName="Unsupported `let` expression" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports `let` expressions in places where they are unsupported.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExperimentalUnresolvedPath" defaultSeverity="ERROR" displayName="Unresolved path (experimental)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved path references. This inspection can report false positives.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsTypeAliasSyntax" defaultSeverity="ERROR" displayName="Incorrect type alias syntax" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect type alias syntax.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidFieldsInStructLiteral" defaultSeverity="ERROR" displayName="Invalid fields in struct" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect field use in struct literals.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsAssociatedTypeMismatch" defaultSeverity="ERROR" displayName="Type mismatched the trait's associated type" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">A type mismatched an associated type of a trait.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTupleLikeUnion" defaultSeverity="ERROR" displayName="Tuple-like union" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports union declarations with tuple syntax.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDotDotDotMustBeLastInArgumentList" defaultSeverity="ERROR" displayName="Misplaced `...` argument" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports variadic functions where `...` is not positioned as the last argument.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnsafeError" defaultSeverity="ERROR" displayName="Unsafe item in safe context" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of unsafe items in a safe context.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDropRef" defaultSeverity="WARNING" displayName="Reference dropped" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;std::mem::drop&lt;/code&gt; with a reference instead of an owned value.&lt;br&gt;
Corresponds to the &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#drop_ref"&gt;drop_ref&lt;/a&gt; lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsConstantMissingType" defaultSeverity="ERROR" displayName="Missing type for constant" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports constant declarations with missing types.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidCharLiteralLength" defaultSeverity="ERROR" displayName="Char literal empty or too long" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports char literals which are empty or too long.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSelfInStaticMethod" defaultSeverity="ERROR" displayName="`self` in static method" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of the `self` keyword in static methods.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExternalLinter" defaultSeverity="ERROR" displayName="External linter" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
This inspection runs external linter to check for rustc or clippy errors.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsImplCopyForWrongType" defaultSeverity="ERROR" displayName="Invalid `Copy` implementation" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid `Copy` implementations. The `Copy` trait can only be implemented for structs, enums, and unions.
&lt;a href="https://doc.rust-lang.org/error_codes/E0206.html"&gt;E0206&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsUnsafeImpl" defaultSeverity="ERROR" displayName="Trait safety mismatch" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports mismatches between the safety of a trait's definition and its implementation.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsQuestionMarkOperator" defaultSeverity="ERROR" displayName="Invalid `?` usage" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect usage of the &lt;code&gt;?&lt;/code&gt; operator.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsVariadicParametersUsedOnNonCABI" defaultSeverity="ERROR" displayName="Variadic parameters for non-C ABI function" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports C-variadic functions that do not use a compatible calling convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsNonStructuralMatchTypeAsConstGenericParameter" defaultSeverity="ERROR" displayName="Non-structural-match type used for const generic parameter" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of non-structural-match types for const generic parameters.
Only structural-match types (types that derive &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; and implement &lt;code&gt;ConstParamTy&lt;/code&gt;)
can be used for const generic parameters.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsNonExhaustiveMatch" defaultSeverity="ERROR" displayName="Non-exhaustive match" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that &lt;code&gt;match&lt;/code&gt; expression is exhaustive, i.e. all possible patterns are covered.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsSelfNotAtTheBeginning" defaultSeverity="ERROR" displayName="`self`/`super` misplaced in path" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `self` and `super` keywords not at the beginning of the path.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTraitObligations" defaultSeverity="ERROR" displayName="Type does not implement trait" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of types that do not implement the necessary traits.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDerivableTraitMembers" defaultSeverity="ERROR" displayName="Derived trait not implemented" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports members that do not implement the traits being derived.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsNestedImplTraitNotAllowed" defaultSeverity="ERROR" displayName="Nested `impl Trait` not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of nested `impl Trait`. `impl Trait` types cannot appear nested in the generic arguments of other `impl Trait` types.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFieldInitShorthand" defaultSeverity="WEAK WARNING" displayName="Non-shorthand field initialization" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases where field initialization shorthand (&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1682-field-init-shorthand.md"&gt;RFC 1682&lt;/a&gt;)
can be used.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsGenericArgumentsBeforeConstraints" defaultSeverity="ERROR" displayName="Generic arguments must be specified before the first constraint" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports generic arguments specified after the first constraint.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExperimentalTypeCheck" defaultSeverity="ERROR" displayName="Type checker (experimental)" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">The Rust type checker (experimental).
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidReexport" defaultSeverity="ERROR" displayName="Re-export of a private item" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports private items that were re-exported publicly.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsReturnMustHaveValue" defaultSeverity="ERROR" displayName="`return` must have a value" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports `return;` statements contained in functions whose return type is not `()`.
&lt;a href="https://doc.rust-lang.org/error_codes/E0069.html"&gt;E0069&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDynOrImplInTraitBounds" defaultSeverity="ERROR" displayName="Use of `dyn`/`impl Trait` in type parameter bounds" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `dyn` and `impl Trait` in type parameter bounds.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFormatMacroErrors" defaultSeverity="ERROR" displayName="Format macro error" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports errors in the use of macros that support formatting.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsLifetimeBoundsInParentheses" defaultSeverity="ERROR" displayName="Lifetime bounds in parentheses" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports lifetime bounds in parentheses.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDbgUsage" defaultSeverity="INFORMATION" displayName="`#[dbg]` usage" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;dbg!&lt;/code&gt; macro.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsIncorrectVisibilityRestriction" defaultSeverity="ERROR" displayName="Incorrect visibility restriction" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect visibility restrictions.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsLiteralOutOfRange" defaultSeverity="ERROR" displayName="Literal out of range" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Check if a numerical value is out of the range of the receiver. For example:
&lt;code&gt;let x: u8 = 256;&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsFunctionCannotHaveSelf" defaultSeverity="ERROR" displayName="`self` function parameter not allowed" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `self` as a function parameter in case it is not allowed.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDanglingElse" defaultSeverity="WARNING" displayName="Dangling `else`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects suspiciously looking &lt;code&gt;else if&lt;/code&gt;-statements split by new lines.&lt;br&gt;
Partially corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#suspicious_else_formatting"&gt;suspicious_else_formatting&lt;/a&gt; lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsControlFlowExprInWhileConditionWithoutLoop" defaultSeverity="ERROR" displayName="Unlabeled `continue`/`break` in `while` loop condition" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of `break`/`continue` keywords without labels in `while` loop conditions.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsManualImplOfFnTrait" defaultSeverity="ERROR" displayName="Manual implementation of `Fn`, `FnMut`, or `FnOnce`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports manual implementations of `Fn`, `FnMut`, and `FnOnce` traits.
Such implementations are unstable and require a &lt;code&gt;#![feature(fn_traits, unboxed_closures)]&lt;/code&gt; attribute.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFunctionSyntax" defaultSeverity="ERROR" displayName="Incorrect function syntax" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports incorrect function syntax.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsExplicitDropCall" defaultSeverity="ERROR" displayName="Explicit call to `drop`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports explicit calls to `drop`. It is not allowed to manually call destructors in Rust.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInclusiveRangeWithNoEnd" defaultSeverity="ERROR" displayName="Inclusive range without an end bound" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports inclusive ranges without a specified end bound (`..=b` or `a..=b`).
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSortImplTraitMembers" defaultSeverity="WEAK WARNING" displayName="`impl` member order differs from trait" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if members in the impl have a same order as in the trait.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsInvalidLiteralSuffix" defaultSeverity="ERROR" displayName="Invalid literal suffix" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports literals with invalid suffixes.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsAbiLiteralMustBeString" defaultSeverity="ERROR" displayName="Non-string ABI literal" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports non-string ABI literals.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsDuplicateEnumDiscriminant" defaultSeverity="ERROR" displayName="Repeated discriminant value" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports discriminant values that are present more than once in a single enum.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsMissingElse" defaultSeverity="WARNING" displayName="Missing `else`" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects suspiciously looking &lt;code&gt;if&lt;/code&gt;-statements with potentially missing &lt;code&gt;else&lt;/code&gt;s.&lt;br&gt;
Partially corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#suspicious_else_formatting"&gt;suspicious_else_formatting&lt;/a&gt; lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsDuplicatedTraitMethodBinding" defaultSeverity="WEAK WARNING" displayName="Duplicate trait method parameter name" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks duplicated parameter names of abstract trait methods.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsMainWithGenerics" defaultSeverity="ERROR" displayName="`main` function with generic parameters" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports `main` functions defined with generic parameters.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="MissingFeatures" defaultSeverity="WARNING" displayName="Missing features" enabled="true" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects Cargo packages with missing cargo features in some of their dependency packages
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsReservedIdentifier" defaultSeverity="ERROR" displayName="Reserved keyword used as an identifier" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports the use of reserved keywords.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUndeclaredLabel" defaultSeverity="ERROR" displayName="Undeclared label" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports undeclared labels.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsCStringPointer" defaultSeverity="WARNING" displayName="Unsafe CString pointer" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unsafe usage of &lt;code&gt;CString&lt;/code&gt;.

The code like &lt;code&gt;CString::new("hello").unwrap().as_ptr()&lt;/code&gt; may lead to memory unsafety
because the string is deallocated at the end of the expression.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsProcMacroAttrInNonProcMacroCrate" defaultSeverity="ERROR" displayName="Proc macro defined outside `proc-macro` crate" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the use of &lt;code&gt;#[proc_macro]&lt;/code&gt;, &lt;code&gt;#[proc_macro_attribute]&lt;/code&gt;, and &lt;code&gt;#[proc_macro_derive]&lt;/code&gt; attributes in non-procedural macro crates.
These attributes only work for procedural macro crates (i.e. crates with the &lt;code&gt;proc-macro&lt;/code&gt; key set to &lt;code&gt;true&lt;/code&gt; in Cargo.toml).
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsFormatMacroWithoutFormatArguments" defaultSeverity="WEAK WARNING" displayName="Immutable reassigned" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports &lt;code&gt;format!&lt;/code&gt; calls with missing format arguments.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsUnnecessaryVisibilityQualifier" defaultSeverity="ERROR" displayName="Unnecessary visibility qualifier" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports unnecessary visibility qualifiers.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsPatStructInvalidFields" defaultSeverity="ERROR" displayName="Invalid fields in struct or tuple struct pattern" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports invalid fields in struct and tuple struct patterns.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsCircularMods" defaultSeverity="ERROR" displayName="Circular modules" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports circular module declarations with the &lt;code&gt;#path&lt;/code&gt; attribute.
Such declarations produce an infinite module graph and cannot be compiled.

&lt;!-- tooltip end --&gt;
A common example of this error is a file module that declares a child &lt;code&gt;mod&lt;/code&gt; referencing the current file:&lt;br&gt;
&lt;code&gt;
    // File: recursive_mod.rs&lt;br&gt;
    #[path = "recursive_mod.rs"]&lt;br&gt;
    mod child_mod;&lt;br&gt;
&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsCallExpr" defaultSeverity="ERROR" displayName="Attempt to call not a function" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">When calling somethings, checks that it is function or method.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsWrongAssocTypeArguments" defaultSeverity="ERROR" displayName="Wrong associated type arguments" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if correct associated type arguments were used for a type or a trait reference.
&lt;br/&gt;
Corresponds to the &lt;a href="https://doc.rust-lang.org/error-index.html#E0191"&gt;E0191&lt;/a&gt; and
&lt;a href="https://doc.rust-lang.org/error-index.html#E0220"&gt;E0220&lt;/a&gt; Rust errors.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsInvalidConstGenericArgument" defaultSeverity="ERROR" displayName="Const generic argument expression without braces" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Reports const generic argument expressions with missing braces.
&lt;!-- tooltip end --&gt;</inspection></group><group name="HTML" path=""><inspection shortName="HtmlUnknownBooleanAttribute" defaultSeverity="WARNING" displayName="Incorrect boolean attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlMissingClosingTag" defaultSeverity="INFORMATION" displayName="Missing closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML element without a closing tag.
Some coding styles require that HTML elements have closing tags even where this is optional.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!&amp;lt;/p&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAnchorTarget" defaultSeverity="WARNING" displayName="Unresolved fragment in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved last part of an URL after the &lt;code&gt;#&lt;/code&gt; sign.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTarget" defaultSeverity="WARNING" displayName="Unresolved file in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file in a link.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckValidXmlInScriptTagBody" defaultSeverity="ERROR" displayName="Malformed content of 'script' tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports contents of &lt;code&gt;script&lt;/code&gt; tags that are invalid XML.&lt;br&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckEmptyScriptTag" defaultSeverity="WARNING" displayName="Empty tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty tags that do not work in some browsers.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script/&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script&gt;&amp;lt;/script&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAttribute" defaultSeverity="WARNING" displayName="Unknown attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlExtraClosingTag" defaultSeverity="WARNING" displayName="Redundant closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant closing tags on empty elements, for example, &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;br&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;&amp;lt;/br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTag" defaultSeverity="WARNING" displayName="Unknown tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML tag. Suggests configuring tags that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlWrongAttributeValue" defaultSeverity="WARNING" displayName="Wrong attribute value" enabled="true" language="HtmlCompatible" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect HTML attribute value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RequiredAttributes" defaultSeverity="WARNING" displayName="Missing required attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Markdown" path=""><inspection shortName="MarkdownUnresolvedHeaderReference" defaultSeverity="WARNING" displayName="Unresolved header reference" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved header references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownUnresolvedFileReference" defaultSeverity="WARNING" displayName="Unresolved file references" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownNoTableBorders" defaultSeverity="WARNING" displayName="Table doesn't have side borders" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table has correct side borders.
For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectTableFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect table formatting" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table is correctly formatted.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectlyNumberedListItem" defaultSeverity="WARNING" displayName="Incorrectly numbered list item" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Ordered list items are expected to have straight numeration starting from 1.&lt;/p&gt;
&lt;p&gt;The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; element for such list, that will number items continuously from 1.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedLinkLabel" defaultSeverity="WARNING" displayName="Unresolved link label" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved link labels in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownOutdatedTableOfContents" defaultSeverity="WARNING" displayName="Outdated table of contents section" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if a particular table of contents section corresponds to the actual structure of the document.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownLinkDestinationWithSpaces" defaultSeverity="WARNING" displayName="Links should not contain spaces" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
To ensure consistency between different tools, file links should not contain spaces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix replaces spaces with their url-encoded equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some%20file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Cargo.toml" path="Rust"><inspection shortName="CargoUnnecessaryPackageKey" defaultSeverity="WEAK WARNING" displayName="Unnecessary `package` field" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;code&gt;package&lt;/code&gt; key in dependency declaration in &lt;code&gt;Cargo.toml&lt;/code&gt;.
&lt;code&gt;package&lt;/code&gt; key is usually used for renaming the dependency.
So, it can be removed when &lt;code&gt;package&lt;/code&gt; key value is the same to the name of the dependency.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TomlDuplicatedKey" defaultSeverity="ERROR" displayName="Duplicate key" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated keys within the same section of a &lt;code&gt;Cargo.toml&lt;/code&gt; file.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="toml"&gt;
  [foo]
  bar = 1 # Property redefinition is not allowed
  bar = 2 # Property redefinition is not allowed
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CargoUnusedDependency" defaultSeverity="WARNING" displayName="Unused dependency" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports crates that are not used in the project's source code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CargoTomlCyclicFeature" defaultSeverity="ERROR" displayName="Cyclic feature dependency" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects features that depend on themselves.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TomlJsonSchemaBased" defaultSeverity="ERROR" displayName="Schema violation" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports errors in Cargo.toml related to structure, constraints, and data types.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NewCrateVersionAvailable" defaultSeverity="WARNING" displayName="Newer crate version available" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports outdated crate versions in Cargo.toml.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TomlUnclosedLiteral" defaultSeverity="ERROR" displayName="Unclosed string literal" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string literals that are missing a closing quote.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CrateVersionInvalid" defaultSeverity="WARNING" displayName="Invalid crate version" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid crate versions in Cargo.toml.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CrateNotFound" defaultSeverity="WARNING" displayName="Crate not found" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any unknown crates listed in Cargo.toml.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="InvalidPackageCategory" defaultSeverity="ERROR" displayName="Invalid package category" enabled="true" language="TOML" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks the &lt;code&gt;categories&lt;/code&gt; field in the &lt;code&gt;[package]&lt;/code&gt; section of Cargo.toml against the &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-categories-field"&gt;crates.io rules&lt;/a&gt;:
&lt;ul&gt;
    &lt;li&gt;The categories must be chosen from the &lt;a href="https://crates.io/category_slugs"&gt;list of valid category slugs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;A maximum of 5 categories is allowed&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Shell script" path=""><inspection shortName="ShellCheck" defaultSeverity="ERROR" displayName="ShellCheck" enabled="true" language="Shell Script" pluginId="com.jetbrains.sh" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports shell script bugs detected by the integrated &lt;a href="https://github.com/koalaman/shellcheck"&gt;ShellCheck&lt;/a&gt; static analysis tool.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RegExp" path=""><inspection shortName="RegExpSuspiciousBackref" defaultSeverity="WARNING" displayName="Suspicious back reference" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports back references that will not be resolvable at runtime.
This means that the back reference can never match anything.
A back reference will not be resolvable when the group is defined after the back reference,
or if the group is defined in a different branch of an alternation.
&lt;p&gt;&lt;b&gt;Example of a group defined after its back reference:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \1(abc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example of a group and a back reference in different branches:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a(b)c|(xy)\1z
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnexpectedAnchor" defaultSeverity="WARNING" displayName="Begin or end anchor in unexpected position" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;\A&lt;/code&gt; anchors not at the beginning of the pattern and
&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; or &lt;code&gt;\z&lt;/code&gt; anchors not at the end of the pattern.
In the wrong position these RegExp anchors prevent the pattern from matching anything.
In case of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors, most likely the literal character was meant and the escape forgotten.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (Price $10)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSingleCharAlternation" defaultSeverity="WARNING" displayName="Single character alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single char alternation in a RegExp.
It is simpler to use a character class instead.
This may also provide better matching performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a|b|c|d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abcd]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CustomRegExpInspection" defaultSeverity="WARNING" displayName="Custom RegExp inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Custom Regex Inspection
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantClassElement" defaultSeverity="WEAK WARNING" displayName="Redundant '\d', '[:digit:]', or '\D' class elements" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;\d&lt;/code&gt; or &lt;code&gt;[:digit:]&lt;/code&gt; that are used in one class with &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;[:word:]&lt;/code&gt;
(&lt;code&gt;\D&lt;/code&gt; with &lt;code&gt;\W&lt;/code&gt;) and can be removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w\d]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnnecessaryNonCapturingGroup" defaultSeverity="WARNING" displayName="Unnecessary non-capturing group" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary non-capturing groups, which have no influence on the match result.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, (?:this) is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, this is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantNestedCharacterClass" defaultSeverity="WARNING" displayName="Redundant nested character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary nested character classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-c[x-z]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-cx-z]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSimplifiable" defaultSeverity="WEAK WARNING" displayName="Regular expression can be simplified" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports regular expressions that can be simplified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a] xx* [ah-hz]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a x+ [ahz]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateAlternationBranch" defaultSeverity="WARNING" displayName="Duplicate branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate branches in a RegExp alternation.
Duplicate branches slow down matching and obscure the intent of the expression.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie|alpha)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantEscape" defaultSeverity="WARNING" displayName="Redundant character escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning.
Many escape sequences that are necessary outside of a character class are redundant inside square brackets &lt;code&gt;[]&lt;/code&gt; of a character class.
&lt;p&gt;
  Although unescaped opening curly braces &lt;code&gt;{&lt;/code&gt; outside of character classes are allowed in some dialects (JavaScript, Python, and so on),
  it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.
  For this reason the inspection does not report escaped opening curly braces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \-\;[\.]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  -;[.]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The &lt;b&gt;Ignore escaped closing brackets '}' and ']'&lt;/b&gt; option specifies whether to report &lt;code&gt;\}&lt;/code&gt; and &lt;code&gt;\]&lt;/code&gt; outside of a character class
when they are allowed to be unescaped by the RegExp dialect.
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpOctalEscape" defaultSeverity="INFORMATION" displayName="Octal escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports octal escapes, which are easily confused with back references.
Use hexadecimal escapes to avoid confusion.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \x07
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateCharacterInClass" defaultSeverity="WARNING" displayName="Duplicate character in character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate characters inside a RegExp character class.
Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [aabc]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abc]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpAnonymousGroup" defaultSeverity="WARNING" displayName="Anonymous capturing group or numeric back reference" enabled="false" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous capturing groups and numeric back references in a RegExp.
These are only reported when the RegExp dialect supports named group and named group references.
Named groups and named back references improve code readability and are recommended to use instead.
When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,
i.e. &lt;code&gt;(?:xxx)&lt;/code&gt; instead of &lt;code&gt;(xxx)&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (\d\d\d\d)\1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A better regex pattern could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (?&amp;lt;quad&gt;\d\d\d\d)\k&amp;lt;quad&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEmptyAlternationBranch" defaultSeverity="WARNING" displayName="Empty branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty branches in a RegExp alternation.
An empty branch will only match the empty string, and in most cases that is not what is desired.
This inspection will not report a single empty branch at the start or the end of an alternation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha||bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRepeatedSpace" defaultSeverity="WARNING" displayName="Consecutive spaces" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple consecutive spaces in a RegExp.
Because spaces are not visible by default, it can be hard to see how many spaces are required.
The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (     )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ( {5})
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEscapedMetaCharacter" defaultSeverity="INFORMATION" displayName="Escaped meta character" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports escaped meta characters.
Some RegExp coding styles specify that meta characters should be placed inside a character class,
to make the regular expression easier to understand.
This inspection does not warn about the meta character &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;,
because those would need additional escaping inside a character class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+\.\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+[.]\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path=""><inspection shortName="ReassignedToPlainText" defaultSeverity="WARNING" displayName="Reassigned to plain text" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files that were explicitly re-assigned to Plain Text File Type.
This association is unnecessary because the platform auto-detects text files by content automatically.

&lt;p&gt;You can dismiss this warning by removing the file type association
in &lt;b&gt;Settings | Editor | File Types | Text&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicatedCode" defaultSeverity="WEAK WARNING" displayName="Duplicated code fragment" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">Reports duplicated blocks of code from the selected scope: the same file or the entire project.&lt;!-- tooltip end --&gt; &lt;p&gt;The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.&lt;p&gt;The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.&lt;p&gt;You can also configure the constructs that you want to anonymize in &lt;a href="settings://duplicates.index"&gt; File | Settings | Editor | Duplicates&lt;/a&gt;.</inspection><inspection shortName="InconsistentLineSeparators" defaultSeverity="WARNING" displayName="Inconsistent line separators" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files with line separators different from the ones that are specified in the project's settings.
&lt;p&gt;For example, the inspection will be triggered if you set the line separator to &lt;code&gt;\n&lt;/code&gt; in
  &lt;a href="settings://preferences.sourceCode?Line%20separator"&gt;Settings | Editor | Code Style | Line separator&lt;/a&gt;,
  while the file you are editing uses &lt;code&gt;\r\n&lt;/code&gt; as a line separator.&lt;/p&gt;

&lt;p&gt;The inspection also warns you about mixed line separators within a file.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProblematicWhitespace" defaultSeverity="WARNING" displayName="Problematic whitespace" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following problems:
&lt;ul&gt;
  &lt;li&gt;Tabs used for indentation when the code style is configured to use only spaces.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation when the code style is configured to use only tabs.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation and tabs used for alignment when the code
    style is configured to use smart tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LongLine" defaultSeverity="WARNING" displayName="Line is longer than allowed by code style" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lines that are longer than the &lt;b&gt;Hard wrap at&lt;/b&gt; parameter specified in
&lt;a href="settings://preferences.sourceCode?Hard%20wrap%20at"&gt;Settings | Editor | Code Style | General&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect formatting" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports formatting issues that appear if your code doesn't
  follow your project's code style settings.
&lt;/p&gt;
&lt;p&gt;
  This inspection is not compatible with languages that require
  third-party formatters for code formatting, for example, Go or
  C with CLangFormat enabled.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantSuppression" defaultSeverity="WARNING" displayName="Redundant suppression" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
public class C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({"WeakerAccess"})
  private boolean CONST = true;
  void f() {
    CONST = false;
  }
}
&lt;/code&gt;&lt;/pre&gt;


&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TodoComment" defaultSeverity="WARNING" displayName="TODO comment" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;TODO&lt;/b&gt; comments in your code.
&lt;p&gt;You can configure the format for &lt;b&gt;TODO&lt;/b&gt; comments in &lt;a href="settings://preferences.toDoOptions"&gt;Settings | Editor | TODO&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Enable the &lt;b&gt;Only warn on TODO comments without any details&lt;/b&gt; option to only warn on empty TODO comments, that
  don't provide any description on the task that should be done. Disable to report all TODO comments.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InjectedReferences" defaultSeverity="ERROR" displayName="Injected references" enabled="true" language="" pluginId="org.intellij.intelliLang" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references injected by
&lt;a href="https://www.jetbrains.com/help/idea/using-language-injections.html"&gt;Language Injections&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
    @Language("file-reference")
    String fileName = "/home/user/nonexistent.file"; // highlighted if file doesn't exist
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyDirectory" defaultSeverity="WARNING" displayName="Empty directory" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports empty directories.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Only report empty directories located under a source folder&lt;/b&gt; option to have only directories under source
  roots reported.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Annotator" defaultSeverity="ERROR" displayName="Annotator" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run.
These issues are usually always highlighted in the editor and can't be configured, unlike inspections.
These options control the scope of checks performed by this inspection:
&lt;ul&gt;
  &lt;li&gt;Option "&lt;b&gt;Report syntax errors&lt;/b&gt;": report parser-related issues.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report issues from language-specific annotators&lt;/b&gt;": report issues found by annotators configured for the relevant language.
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/annotator.html"&gt;Custom Language Support: Annotators&lt;/a&gt; for details.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report other highlighting problems&lt;/b&gt;": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions).
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting"&gt;Custom Language Support: Highlighting&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Naming conventions" path="Rust/Lints"><inspection shortName="RsTypeAliasNaming" defaultSeverity="WARNING" displayName="Type alias naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if type alias names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTraitNaming" defaultSeverity="WARNING" displayName="Trait naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if trait names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsMethodNaming" defaultSeverity="WARNING" displayName="Method naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if method names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsArgumentNaming" defaultSeverity="WARNING" displayName="Argument naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if function and method argument names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsStaticConstNaming" defaultSeverity="WARNING" displayName="Static constant naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if static constant names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsTypeParameterNaming" defaultSeverity="WARNING" displayName="Type parameter naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if type parameter names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsVariableNaming" defaultSeverity="WARNING" displayName="Variable naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if variable names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsStructNaming" defaultSeverity="WARNING" displayName="Struct naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if struct names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsAssocTypeNaming" defaultSeverity="WARNING" displayName="Associated type naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if associated type names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFunctionNaming" defaultSeverity="WARNING" displayName="Function naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if function names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsEnumVariantNaming" defaultSeverity="WARNING" displayName="Enum variant naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if enum variant names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsFieldNaming" defaultSeverity="WARNING" displayName="Field naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if field names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsEnumNaming" defaultSeverity="WARNING" displayName="Enum naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if enum names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsConstNaming" defaultSeverity="WARNING" displayName="Constant naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if constant names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsSelfConvention" defaultSeverity="WARNING" displayName="Self convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks some naming conventions for methods.

Corresponds to &lt;a href="https://rust-lang.github.io/rust-clippy/stable/#wrong_self_convention"&gt;wrong_self_convention&lt;/a&gt;
lint from Rust Clippy.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RsMacroNaming" defaultSeverity="WARNING" displayName="Macro naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if macro names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsLifetimeNaming" defaultSeverity="WARNING" displayName="Lifetime naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if lifetime names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection><inspection shortName="RsModuleNaming" defaultSeverity="WARNING" displayName="Module naming convention" enabled="true" language="Rust" pluginId="com.jetbrains.rust" pluginVersion="251.26094.152" isGlobalTool="false">Checks if module names follow the Rust naming convention.
&lt;!-- tooltip end --&gt;</inspection></group><group name="RELAX NG" path=""><inspection shortName="UnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a named pattern (&lt;code&gt;define&lt;/code&gt;) in RELAX-NG files that use XML syntax.
Suggests creating the referenced &lt;code&gt;define&lt;/code&gt; element.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedDefine" defaultSeverity="WARNING" displayName="Unused define" enabled="false" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused named pattern (&lt;code&gt;define&lt;/code&gt;) in a RELAX-NG file (XML or Compact Syntax).
&lt;code&gt;define&lt;/code&gt; elements that are used through an include in another file are ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Proofreading" path=""><inspection shortName="SpellCheckingInspection" defaultSeverity="TYPO" displayName="Typo" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html&gt;&lt;body&gt;Reports typos and misspellings in your code, comments, and literals and fixes them with one click.&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="LanguageDetectionInspection" defaultSeverity="WEAK WARNING" displayName="Natural language detection" enabled="true" language="" pluginId="tanvd.grazi" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;Detects natural languages and suggests enabling corresponding grammar and spelling checks.&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="AiaStyle" defaultSeverity="TYPO" displayName="Style" enabled="true" language="" pluginId="com.intellij.ml.llm" pluginVersion="251.26094.80.13" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Check the writing style defined in:
&lt;ul&gt;
    &lt;li&gt;
        Grazie rule files (e.g. &lt;code&gt;.grazie.en.yaml&lt;/code&gt; for English)
        for this project or its specific subdirectories.
        To create such a file, invoke &lt;b&gt;New&lt;/b&gt; menu on any (e.g. root) directory of the project.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;i&gt;Style&lt;/i&gt; rules in &lt;i&gt;Editor | Natural languages | Rules&lt;/i&gt; settings
    &lt;/li&gt;
&lt;/ul&gt;

This inspection only returns results via &lt;b&gt;Code | Analyze Code | Run Inspection By Name...&lt;/b&gt; or in offline analysis.
Editor highlighting of style issues is performed independently of this inspection's settings.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GrazieInspection" defaultSeverity="GRAMMAR_ERROR" displayName="Grammar" enabled="true" language="" pluginId="tanvd.grazi" pluginVersion="251.26094.152" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;
Reports grammar mistakes in your text. You can configure the inspection in
&lt;a href="settings://reference.settingsdialog.project.grazie"&gt;Settings | Editor | Natural Languages | Grammar and Style&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection></group></inspections>